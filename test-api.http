# Library Management System API Tests
# Use this file with REST Client extension in VS Code

### Health Check
GET http://localhost:3000/api/health

### Register a new user
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "email": "test@example.com",
  "password": "password123",
  "phone": "+1234567890"
}

### Login (Admin)
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "admin@library.com",
  "password": "admin123"
}

### Login (Regular User)
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "john@example.com",
  "password": "user123"
}

### Refresh Token
POST http://localhost:3000/api/auth/refresh
Content-Type: application/json

{
  "refreshToken": "YOUR_REFRESH_TOKEN_HERE"
}

### Logout (revoke refresh token)
POST http://localhost:3000/api/auth/logout
Content-Type: application/json

{
  "refreshToken": "YOUR_REFRESH_TOKEN_HERE"
}

### Logout from all devices
POST http://localhost:3000/api/auth/logout-all
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Get all books (with pagination)
GET http://localhost:3000/api/books?page=1&limit=10

### Search books by title
GET http://localhost:3000/api/books?title=Harry Potter

### Get specific book details
GET http://localhost:3000/api/books/BOOK_ID_HERE

### Create a new book (Admin only)
POST http://localhost:3000/api/books
Content-Type: application/json
Authorization: Bearer YOUR_ADMIN_JWT_TOKEN_HERE

{
  "title": "New Book Title",
  "isbn": "9781234567890",
  "publicationYear": 2023,
  "totalCopies": 3,
  "author": {
    "name": "New Author",
    "email": "author@example.com",
    "bio": "Author biography"
  }
}

### Update book (Admin only)
PUT http://localhost:3000/api/books/BOOK_ID_HERE
Content-Type: application/json
Authorization: Bearer YOUR_ADMIN_JWT_TOKEN_HERE

{
  "title": "Updated Book Title",
  "totalCopies": 5
}

### Delete book (Admin only)
DELETE http://localhost:3000/api/books/BOOK_ID_HERE
Authorization: Bearer YOUR_ADMIN_JWT_TOKEN_HERE

### Borrow a book
POST http://localhost:3000/api/borrow
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "bookId": "BOOK_ID_HERE"
}

### Return a book
POST http://localhost:3000/api/return/BORROW_RECORD_ID_HERE
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Get my borrowed books
GET http://localhost:3000/api/my-books
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Reserve a book
POST http://localhost:3000/api/reserve
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "bookId": "BOOK_ID_HERE"
}

### Get my reservations
GET http://localhost:3000/api/reservations
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Cancel a reservation
DELETE http://localhost:3000/api/reservations/RESERVATION_ID_HERE
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Get overdue books (Admin only)
GET http://localhost:3000/api/overdue
Authorization: Bearer YOUR_ADMIN_JWT_TOKEN_HERE